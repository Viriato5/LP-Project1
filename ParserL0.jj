PARSER_BEGIN(Parser)

import java.util.*;

public class Parser {

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
| < SINGLE_LINE_COMMENT : "//" (~["\n","\r"])* ("\r\n" | "\n" | "\r") >
}

TOKEN :
{

  < LET : "let" >
  |
  < TYPE : "type" >
  |
  < TRUE: "true" >
  |
  < FALSE: "false" >
  |
  < PIPE : "|">
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < STAR : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < LBRA : "{" >
  |
  < RBRA : "}" >
  |
  < EQUAL : "=" >
  |
  < DOT : ".">
  |
  < COLON : ":" >
  |
  < SEMIC : ";" >
  |
  < TERM : ";;" >
  |
  < COMMA : "," >
  |
  < AND : "&&" >
  |
  < OR : "||" >
  |
  < EQ : "==" >
  |  
  < GT : ">" >
  |
  < LT : "<" >
  |
  < GTEQ : ">=" >
  |
  < LTEQ : "<=" >
  |
  < DIF : ("!=" | "~=" ) >
  |
  < NOT : "~" >
  |
  < ASSIGN : ":=" >
  |
  < BOX : "box" >
  |
  < DEREF : "!" >
  |
  < IF : "if" >
  |
  < ELSE : "else" >
  |
  < WHILE : "while" >
  |
  < PRINT : "print" >
  |
  < PRINTLN : "println" >
  |
  < FN : "fn" >
  |
  < ARROW : "=>" >
  |
  < NIL : "nil" >
  |
  < LIST : "::" >
  |
  < LAZYLIST : ":?" >
  |
  < MATCH : "match" >
  |
  < MATCHARROW : "->" >
  |
  <INT  : "int">
  |
  <UNIT  : ( "()" | "unit" )>
  |
  <BOOL  : "bool">
  |
  <STRING  : "string">  
  |
  <LISTT  : "list">  
  |
  <REF  : "ref">  
  |
  <UNION  : "union">  
  |
  <STRUCT  : "struct"> 
  |
  < String: "\"" ( (~["\"","\\"]) | ("\\" ( ["n","t","b","r","f","\\","\""] ) ) )* "\"" >
  |
  < Id: ["a"-"z","A"-"Z","_"] ( ["_","a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Label: ["#"] ( ["_","a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
}

ASTNode Start():
{ ASTNode t; }
{
    <EOF> {return null;}
  | t = Let() <TERM> { return t; }
}

ASTNode Let() :
{
  Token n;
  ASTNode t, e1, body;
  ASTType t1, at = null;
  List<Bind> decls = new ArrayList<Bind>();
  Bind decl;
}
{
  (
    // Accept any number of let/type declarations in any order
    (
      (
        <LET> n=<Id> { at = null; } [ <COLON> at = Type() ] <EQUAL> e1 = BA() <SEMIC>
        { decls.add(new Bind(n.image, at, e1)); }
      )
      |
      (
        <TYPE> n=<Id> <EQUAL> t1 = Type() <SEMIC>
        { decls.add(new Bind(n.image, t1, null)); }
      )
    )*
    body = Seq()
    {
      // Now wrap the body in nested ASTLet/ASTTypeDef in reverse order
      t = body;
      for (int i = decls.size() - 1; i >= 0; i--) {
        decl = decls.get(i);
        if (decl.getExp() != null) {
          List<Bind> single = new ArrayList<Bind>();
          single.add((Bind)decl);
          t = new ASTLet(single, t);
        } else {
          java.util.HashMap<String, ASTType> single = new java.util.HashMap<String, ASTType>();
          single.put(decl.getId(), decl.getType());
          t = new ASTTypeDef(single, t);
        }
      }
    }
  )
  { return t; }
}

ASTNode Seq() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = SeqExp()
     ( ( op=<SEMIC> ) t2 = SeqExp() 
 		 {
		   t1 = new ASTExp(t1, t2); 
     } 
		)*
     { return t1; }  
}

ASTNode SeqExp() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = BA() ( ( op=<ASSIGN> ) t2 = BA() 
 		 {
		   t1 = new ASTAssign(t1, t2); 
     } 
		)*
     { return t1; }  
}

ASTNode BA() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = BM() ( ( op=<OR> ) t2 = BM() 
 		 {
		 t1 = new ASTOr(t1,t2);
		 } 
		)*
     { return t1; } 
}

ASTNode BM() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Rel() ( ( op=<AND> ) t2 = Rel() 
 		 {
		 t1 = new ASTAnd(t1,t2);
 		 } 
		)*
     { return t1; } 
}


ASTNode Rel() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Exp() ( ( op=<EQ> | op=<GT> | op=<LT> | op=<GTEQ> | op=<LTEQ> | op=<DIF>) t2 = Exp() 
     	  	  {
              t1 = new ASTComp(t1, op.image, t2);            
            }
		)?
     { return t1; } 
}


ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 } 
               ) *
     { return t1; } 
}

ASTNode Term() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Fact() (
     (op=<LIST> | op=<LAZYLIST>) t2 = Term() 
     { if (op.kind==LIST)
      {t1 = new ASTList(t1,t2);}
      else {t1 = new ASTLazyList(t1,t2);}}
		 |
     (
     op=<STAR> t2 = Fact()   { t1 = new ASTMult(t1,t2); }
		 |
		 op=<DIV> t2 = Fact()  { t1 = new ASTDiv(t1,t2); }
     |
		 op = <LPAR> t2 = Let ()
		      <RPAR> { t1 = new ASTFnApp(t1,t2); } 
     |
     op = <UNIT> { t1 = new ASTFnApp(t1,new ASTUnit()); }
		)*
    )
     { return t1; } 
}

ASTNode Fun() : 
{
Token n; 
ASTNode t, e1=null, e2;
ASTType at;
}
{
      <FN> n=<Id> <COLON> at = Type()
      { t = new ASTFn(n.image, at, null); e1 = t;}
      ( <COMMA> n = <Id> <COLON> at = Type() { e2 = new ASTFn(n.image, at, null);
		  ((ASTFn)e1).setBody(e2); e1 = e2; })*
		  <ARROW> <LBRA> e2 = Let() <RBRA> { ((ASTFn)e1).setBody(e2); }
      { return t; } 
}


ASTNode Fact() :
{ Token n,m, n1, m1; 
  ASTNode t, e1, e2;
  List<Bind> struct = new ArrayList<Bind>();
  ASTNode  body, alt;
  ASTType at = null;
} {
   (
      n=<Num> { t = new ASTInt(Integer.parseInt(n.image)); } 
    | n=<TRUE> { t = new ASTBool(true); }
    | n=<FALSE> {  t = new ASTBool(false); }
    | n=<Id>  { t = new ASTId(n.image); }
    | n=<String> { t = new ASTString(n.image); }
    | n=<Label> <LPAR> e1 = Fact() <RPAR> { struct.add(new Bind(n.image, at, e1)); t = new ASTUnion(struct); }
    | <LBRA> [n = <Label> <EQUAL> e1 = Fact() { struct.add(new Bind(n.image, at, e1)); }
       (<COMMA> n = <Label> <EQUAL> e1 = Fact() { struct.add(new Bind(n.image, at, e1)); } )*] <RBRA>
       { t = new ASTStruct(struct); }
    | <UNIT> {t = new ASTUnit(); }
    | <BOX> t=Fact() { t = new ASTBox(t); }
    | <DEREF> t=Fact() { t = new ASTDeRef(t); }
    | <MINUS> t=Fact() { t = new ASTNeg(t); }
    | <NOT> t=Fact() {  t = new ASTNot(t);  }
    | <IF> t=BA() <LBRA> e1=Let() <RBRA> <ELSE> <LBRA> e2=Let() <RBRA> { t = new ASTIf(t, e1, e2 ); }
    | <WHILE> t=BA() <LBRA> body=Let() <RBRA> {  t = new ASTWhile(t,body); }
    | t = Fun()
    | <PRINT> t=Fact() { t = new ASTPrint(t); }
    | <PRINTLN> t=Fact() { t = new ASTPrintLn(t);  }
    | <LPAR> t=Let() <RPAR> 
    | <NIL> { t = new ASTNil(); }
    | <MATCH> t = Let() <LBRA>
      (<NIL> <MATCHARROW> e1 =Let()
      <PIPE> n=<Id> <LIST> m=<Id> <MATCHARROW> e2 =Let() <RBRA>
      { t = new ASTMatch(t,e1,n.image,m.image,e2);}
      |
      n = <Label> <LPAR> n1 = <Id> <RPAR> <MATCHARROW> e1 = Let() { struct.add(new Bind (n.image, new ASTTId(n1.image), e1)); }
      (<PIPE> m = <Label> <LPAR> m1 = <Id> <RPAR> <MATCHARROW> e2 = Let() { struct.add(new Bind (m.image, new ASTTId(m1.image), e2)); } )* <RBRA>
      { t = new ASTMatchUnion(t, struct); })
    )
    (
      LOOKAHEAD(2)
      <DOT> n = <Label>  { t = new ASTDot(t, n.image); }
    )*
   { return t; }
}

ASTType Type() : 
{
  ASTType t1, t2;
}
{        
    t1 = TypeF() (<MATCHARROW> t2 = Type() { t1 = new ASTTArrow(t1,t2);} )?
    { return t1; }
}

TypeBindList LabelList() :
{
  ASTType t;
  HashMap<String,ASTType> ll;
  Token n;
}
{   { ll = new HashMap<String,ASTType>() ; }
    [ n=<Label>  <COLON> t = Type() { ll.put(n.image,t); } 
              (<COMMA> n=<Label>  <COLON> t = Type() { ll.put(n.image,t);} )*
    ]
    { return new TypeBindList(ll); }
}

ASTType TypeF() : 
{
  ASTType t;
  TypeBindList ll;
  Token n;
}
{        
    ( 
          <INT> { t = new ASTTInt(); } 
        | n=<Id> { t = new ASTTId(n.image); } 
        | <BOOL> { t = new ASTTBool(); } 
        | <UNIT> { t = new ASTTUnit(); } 
        | <STRING> { t = new ASTTString(); } 
        | <REF> <LT> t=Type() <GT> { t = new ASTTRef(t); }
        | <LISTT> <LT> t=Type() <GT> { t = new ASTTList(t); }
        | <STRUCT> <LBRA> ll = LabelList() <RBRA> { t = new ASTTStruct(ll); return t; }
        | <UNION> <LBRA> ll = LabelList() <RBRA> { t = new ASTTUnion(ll); return t; }
        | <LPAR> t=Type() <RPAR> 
    )
    { return t; }
}